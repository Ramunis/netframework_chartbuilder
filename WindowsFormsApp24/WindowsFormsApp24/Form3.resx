<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAKAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAXQAAAEcAAABHAAAARwAAAEcAAABHAAAARwAA
        AEcAAABHAAAARwAAAEcAAABHAAAARwAAAEcAAABHAAAARwAAAEcAAABHAAAARwAAAEcAAABHAAAAXAAA
        AP8AAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAeAAAA/wAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAAB4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAB4AAAD/AAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAHgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAP8AAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAA
        AP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA/wAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAoAAAA/wAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAAD/AAAAKAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACgAAAD/AAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAP8AAAAoAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAQAA
        AAAAAAAKAAAAAAAAAAAAAAAKAAAAAQAAAAEAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA/wAA
        ACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        APoAAAAuAAAAAgAAAOEAAAA+AAAAPwAAAOkAAAAGAAAAMQAAAPcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB4AAAD/AAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAHgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA+gAAAC4AAAAAAAAAggAAAJEAAACZAAAAigAAAAAAAAAxAAAA9wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHgAAAP8AAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAD6AAAALgAAAAAAAAAiAAAA3AAAAOgAAAAlAAAAAAAAADEAAAD3AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAeAAAA/wAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAA
        AB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPoAAAAuAAAAAAAAAAAAAADIAAAAyAAAAAAAAAAAAAAAMQAA
        APcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAAD/AAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACgAAAD/AAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+gAAAC4AAAAAAAAACQAAAO4AAADkAAAACwAA
        AAAAAAAxAAAA9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAP8AAAAoAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD6AAAALgAAAAAAAABbAAAAxQAA
        AKYAAABhAAAAAAAAADEAAAD3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA/wAAACgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAAB4AAAAAAAAAAAAAAAAAAAA6AAAAxQAAAP0AAADPAAAAYgAA
        AL0AAABvAAAAVgAAAMQAAABkAAAA0AAAAP0AAADFAAAAOAAAAAAAAAAAAAAAAAAAAB4AAAD/AAAAKAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAHgAAAAAAAAAAAAAAAAAAABYAAABKAAAASgAA
        AEoAAAAlAAAASQAAAA8AAAAJAAAASgAAACcAAABKAAAASgAAAEoAAAAVAAAAAAAAAAAAAAAAAAAAHgAA
        AP8AAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAeAAAA/wAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAAB4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAB4AAAD/AAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAHgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAP8AAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAA
        AP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAA/wAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAoAAAA/wAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAAA9AAAAPQAAAD0AAAA9AAAAPQAAAD0AAAA9AAAAPQAAAFQAAAD/AAAAKAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACgAAAD/AAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAFAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPsAAAAeAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAUAAAA/wAAADoAAAAJAAAACQAAAAkAAAAJAAAACQAAAIUAAAD7AAAAVgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAD/AAAAMgAAAAAAAAAAAAAAAAAAAAAAAAB7AAAA+wAA
        AFYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAHgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAP8AAAAyAAAAAAAAAAAAAAAAAAAAewAA
        APsAAABWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAA/wAAADIAAAAAAAAAAAAA
        AHsAAAD7AAAAVgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAA
        AB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAD/AAAAMgAA
        AAAAAAB7AAAA+wAAAFYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACgAAAD/AAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAA
        AP8AAAAyAAAAewAAAPsAAABWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAKAAAAP8AAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAUAAAA/wAAAKoAAAD7AAAAVgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAAF0AAABHAAAARwAAAEcAAABHAAAARwAAAEcAAABHAAAARwAA
        AEcAAABHAAAARwAAAFUAAAD/AAAA+wAAAFYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPsAAABWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4AAAB+AAAAfj///H4///x+P//8fj///H4///x+P//8fj5YfH4+AHx+Pk
        J8fj5CfH4+Znx+PkJ8fj5CfH44ABx+OAAcfj///H4///x+P//8fj///H4/+AB+P/gAfj/4AP4/+PH+P/
        jj/j/4x/4/+I/+P/gf/j/4P/4AAH/+AAD/8=
</value>
  </data>
</root>